@startuml
'https://plantuml.com/class-diagram

package models{

    class Chat{
        +uuid:UUID
        +client:User
        +manager: User
    }
    class Feedback{
     + uuid : UUID
     + user : User?
     + timestamp : Date
     + grade : Int
     + feedback : String?
     + good : Good
    }
    class Good{
        + uuid : UUID
       + catalog : String
        + descr: String
        + name: String
       + price: Float
        + imgPath: String?
       + parametrList: List<Parametr>
    }
    class GoodRequest{
        + uuid : UUID
        + good : Good
        + request : Request
    }
    class Message{
        + uuid : UUID
        + user: User
        + chat: Chat
        + text: String
        + timestamp: Date
    }
    class Status{
        + uuid : UUID
        +  name : String
        + isInitial : Int
        +  isTerminal : Int
    }
    class StatusHistory{
        + uuid : UUID
        +request: Request
       + comment : String
        + setupTimestamp: Date
       + status : Status
    }
    class User{
        +  uuid : UUID
        +  email : String
        +  pass : String
        + role: Short
        +  name: String
        + birthDate: Date
        +  phone: String
    }
       class Parameter{
            +  uuid : UUID
            + name : String
            + good: Good
        }

    class Request{
     +  uuid : UUID
     + paymentData: String,
     + client: User
     + manager: User
    }

    Chat "*"--"1" User
    Feedback "*"--"1" User
    StatusHistory "*"--"1" Status
    Message "*"--"1" User
    Message "*"--"1" Chat
    Feedback "*"--"1" Good
    GoodRequest "*"--"1" Good
    GoodRequest "*"--"1" Request
    Request "1"--"*" User
    StatusHistory "*"--"1" Request
    Parameter "*"--"*" Good
}


class EntityManager{}

class ChatFacade{
    - entityManager:EntityManager
    getChatsByClientId(clientId:UUID):List<Chat>
    getChatsByManagerId(manager:UUID):List<Chat>
    createChat(userId:UUID, managerId:UUID):Boolean
    createChatWithRandomManager(userId:UUID):Boolean
}
class FeedbackFacade{
    - entityManager:EntityManager
    addFeedback(feedback:Feedback):Boolean
    getAllFeedbacks(limit:int, offset:int):List<Feedback>
}
class GoodFacade{
    - entityManager:EntityManager
    getAllGoods(limit:int, offset:int):List<Good>
     getGoodsByPopularity(limit:int, offset:int):List<Good>
     getGoodsByRequests(limit:int, offset:int):List<Good>
    getFullInfoForGood(good_id:UUID):FullGoodInfoDto
    createGood(good:Good, catalog:UUID):Boolean
}
class MessageFacade{
    - entityManager:EntityManager
     getMessagesForChat(chat:UUID):List<Message>
     postMessage(text:String):List<Message>
}
class RequestFacade{
    - entityManager:EntityManager
    getUuidOfFinalStatus():UUID
    postRequest(request:UsersRequestDto):Boolean
     getMyRequests(user:UUID):List<MyRequestDto>
    getAllUnfinishedRequests():List<Request>
    getAllUnfinished(maUuid:UUID):List<Request>
}
class UserFacade{
    - entityManager:EntityManager
    doLogin(login:String, password:String):LoginResultDto
    register(regdata:User):RegisterResultDto
    getAllUsers(limit:int, offset:int):List<User>
    getAllManagers(limit:int, offset:int):List<User>
}



class UserService{
    - userFacade:UserFacade
     doLogin(login:String,password:String):LoginResultDto
     register(regdata:User):RegisterResultDto
     getAllUsers():List<User>
     getAllManagers():List<User>
}
class RequestService{
    - requestFacade:RequestFacade
    postRequest(request:UsersRequestDto):Boolean
     getMyRequests(user:UUID):List<MyRequestDto>
     getAllUnfinished():List<Request>
     getAllUnfinishedForManager(managerId:UUID):List<Request>
}
class MessageService{
    - messageFacade:MessageFacade
    getMessagesForChat(chat:UUID ):List<Message>
    postMessage():List<Message>
}
class GoodService{
    - goodFacade:GoodFacade
    getMessagesForChat():List<Good>
    getGoodsByPopularity():List<Good>
    getGoodsByRequests():List<Good>
    getFullGoodInfo(good:UUID):FullGoodInfoDto
    createGood(good:Good):Boolean
}
class FeedbackService{
    - feedbackFacade:FeedbackFacade
    postFeedback(feedback:Feedback):Boolean
    getAllFeedbacks():List<Feedback>
}
class ChatService{
    - chatFacade:ChatFacade
    getChatsByClientId(clientId:UUID):List<Chat>
    getChatsByManagerId(managerId:UUID):List<Chat>
    createChat(client:UUID,manager:UUID):Boolean
    autoCreateChat(client:UUID):Boolean
}

UserService ..o UserFacade
RequestService ..o RequestFacade
MessageService ..o MessageFacade
GoodService ..o GoodFacade
FeedbackService ..o FeedbackFacade
ChatService ..o ChatFacade

EntityManager ..o UserService
EntityManager ..o RequestService
EntityManager ..o MessageService
EntityManager ..o GoodService
EntityManager ..o FeedbackService
EntityManager ..o ChatService

@enduml